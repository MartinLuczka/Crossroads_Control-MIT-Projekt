SHELL := /bin/bash
#MAKEFLAGS := --jobs=1
MAKEFLAGS := --jobs=$(shell nproc --ignore 1)
MAKEFLAGS += --output-sync=target
MAKEFLAGS += --load-average=$(shell nproc)
######################################################
#         Makefile for sdcc-gas
######################################################
#
#### STM8 device LowerCase
#
#DEVICE_FLASH=stm8s003k3
#DEVICE_FLASH=stm8s103f3
#DEVICE_FLASH=stm8s105c6
DEVICE_FLASH=stm8s208rb

### STlink version for falsh2 targer (stm8flash program)
#STLINK=stlink
#STLINK=stlinkv2
STLINK=stlinkv21

F_CPU=16000000

ifeq ($(OS),Windows_NT)
	CC_ROOT = "/c/Program Files/SDCC"
	STVP_ROOT = "/c/Program Files (x86)/STMicroelectronics/st_toolset/stvp"
else
	CC_ROOT = /usr/local/stow/sdcc-gas
endif
######################################################################################
CC = $(CC_ROOT)/bin/sdcc
ifeq ($(wildcard $(CC)),)
	CC = sdcc
endif

#DEVICE=STM8S103
DEVICE=$(shell bash .make/device $(DEVICE_FLASH))
DEVICE_FLASH_STVP=$(shell bash .make/device_stvp $(DEVICE_FLASH))

MKDIR = mkdir
CP = cp

ifeq ($(findstring 2019, $(shell openocd --version 2>&1)), 2019)
    interface = interface/stlink.cfg
else
    interface = interface/stlink-dap.cfg
endif
ifeq ($(findstring 003, $(DEVICE)), 003)
	target = target/stm8s003.cfg
else ifeq ($(findstring 103, $(DEVICE)), 103)
	target = target/stm8s103.cfg
else ifeq ($(findstring 105, $(DEVICE)), 105)
	target = target/stm8s105.cfg
else
	target = target/stm8s.cfg
endif
OPENOCD = openocd -f .make/stm8s-flash.cfg -f $(interface) -f $(target)


ifeq ($(OS),Windows_NT)
    uname_S := Windows

	LN = cp
	PYTHON = python

	STVP = $(STVP_ROOT)/STVP_CmdLine.exe
else
    uname_S := $(shell uname -s)

	LN = ln -sf
	PYTHON = python3
endif

# set compiler path & parameters 
CFLAGS  = -mstm8 --out-fmt-elf --opt-code-size
#CFLAGS += --std-sdcc99
CFLAGS += --std-sdcc2x
CFLAGS += --asm=gas --function-sections --data-sections
CFLAGS += --nogcse --all-callee-saves --stack-auto --fverbose-asm --float-reent --no-peep

CFLAGS += -D F_CPU=$(F_CPU)
CFLAGS += -D _SDCC_GAS_
CFLAGS += --debug

LD = stm8-ld
LD_FLAGS = -T.make/elf32$(DEVICE_FLASH).x --print-memory-usage --gc-sections -Map $(OUTPUT_DIR)/map_$(DEVICE).map
#LIB_DIRS = $(addprefix -L, $(CC_ROOT)/share/sdcc/lib/stm8-large)
LIB_DIRS = $(addprefix -L, $(CC_ROOT)/share/sdcc/lib/stm8)

#AS = stm8-as
#AS_FLAGS =

# set output folder and target name
OUTPUT_DIR = ./build-$(DEVICE)
TARGET     = $(OUTPUT_DIR)/out
OUTPUT_SPL_LIBDIR = ../build_SPLlib-$(DEVICE)
OUTPUT_SDCC_LIBDIR = ./build_lib-$(DEVICE)
SPL_LIB = ../SPL/spl-$(DEVICE).o.lib
SDCC_LIB = ../sdcc.o.lib

# set project folder and files (all *.c)
PRJ_ROOT    = .
PRJ_SRC_DIR = $(PRJ_ROOT)/src
PRJ_INC_DIR = $(PRJ_ROOT)/inc
# all project sources included by default
PRJ_SOURCE  = $(notdir $(wildcard $(PRJ_SRC_DIR)/*.c))
PRJ_OBJECTS := $(addprefix $(OUTPUT_DIR)/, $(PRJ_SOURCE:.c=.o))
PRJ_INCS  = $(wildcard $(PRJ_INC_DIR)/*.h)

# set SPL paths
#SPL_SRC_DIR = /usr/local/lib/stm8/src/
#SPL_INC_DIR = /usr/local/lib/stm8/inc/
SPL_SRC_DIR = ../SPL/src/
SPL_INC_DIR = ../SPL/inc/
#SPL_SRC_DIR = ../SPL-$(DEVICE)/src/
#SPL_INC_DIR = ../SPL-$(DEVICE)/inc/
# add all library sources used here singly ... or all .c files in SPL src dir
#SPL_SOURCE  = stm8s_gpio.c stm8s_clk.c stm8s_tim4.c stm8s_itc.c 
#SPL_SOURCE += stm8s_uart1.c
#SPL_SOURCE  = $(notdir $(wildcard $(SPL_SRC_DIR)/*.c))
ifneq ($(wildcard ../SPLSPL),)
	include ../SPLSPL/mk/$(DEVICE).mk
else
start: spl
endif
SPL_SOURCE = $(foreach prefix, $(SPL_SOURCE_PREFIX), $(notdir $(wildcard $(SPL_SRC_DIR)/$(prefix)*.c)))
SPL_OBJECTS := $(addprefix $(OUTPUT_SPL_LIBDIR)/, $(SPL_SOURCE:.c=.o))

SDCC_LIB_SRC_DIR = $(CC_ROOT)/share/sdcc/lib/src/
### buď se knihovní funkce vyberou přes hvězdičku
SDCC_LIB_SOURCE  = $(notdir $(wildcard $(CC_ROOT)/share/sdcc/lib/src/_mul*.c))
SDCC_LIB_SOURCE += $(notdir $(wildcard $(CC_ROOT)/share/sdcc/lib/src/_div*.c))
SDCC_LIB_SOURCE += $(notdir $(wildcard $(CC_ROOT)/share/sdcc/lib/src/_mod*.c))
### nebo se knihovní funkce vyberou jednotlivě
#SDCC_LIB_SOURCE +=  _modulong.c _mullong.c _divulong.c _mulint.c _modsint.c
#SDCC_LIB_SOURCE  = $(notdir $(wildcard $(CC_ROOT)/share/sdcc/lib/src/_*.c)) # toto nefunguje dobře
SDCC_LIB_SOURCE += printf_large.c _strlen.c sprintf.c vprintf.c puts.c
SDCC_LIB_OBJECTS := $(addprefix $(OUTPUT_SDCC_LIBDIR)/, $(SDCC_LIB_SOURCE:.c=.o))

# collect all include folders
INCLUDE = -I$(PRJ_INC_DIR) -I$(SPL_INC_DIR) 

# collect all source directories
VPATH=$(PRJ_SRC_DIR):$(SPL_SRC_DIR):$(SDCC_LIB_SRC_DIR)

# Source dependencies:
#DEPS = $(OBJECTS:.o=.d)
#ASM_DEPS = $(OBJECTS:.o=.asm)

#-include $(DEPS)


.PHONY: ihx elf all
ihx: $(TARGET).ihx
elf: $(TARGET).elf
all: $(TARGET).ihx

$(TARGET).elf: $(PRJ_OBJECTS)  $(SPL_LIB) $(SDCC_LIB)
	$(LD) $^ -o $@ $(LD_FLAGS) $(LIBS)
	$(LN) $@ ./out.elf || $(LN) $@ ./out.elf

$(TARGET).ihx: $(TARGET).elf
	stm8-objcopy -O ihex $(TARGET).elf $(TARGET).ihx
	$(LN) $@ ./out.ihx || $(LN) $@ ./out.ihx
	@echo MemSize: 
	@$(PYTHON) .make/sizecal.py ./out.ihx
	@echo


$(OUTPUT_DIR)/%.d: %.c $(PRJ_INCS) Makefile | $(OUTPUT_DIR) ../SPL ../SPLSPL
	$(CC) -c $< $(CFLAGS) -D$(DEVICE) $(INCLUDE) -MM > $@
$(OUTPUT_DIR)/%.o: %.c $(OUTPUT_DIR)/%.d
	$(CC) -c $< $(CFLAGS) -D$(DEVICE) $(INCLUDE)  -o $@ 2>&1 | $(PYTHON) .make/recolor.py; exit $${PIPESTATUS[0]}

$(OUTPUT_SPL_LIBDIR)/%.d: %.c | $(OUTPUT_SPL_LIBDIR)  ../SPL ../SPLSPL
	$(CC) -c $< $(CFLAGS) -D$(DEVICE) $(INCLUDE) -MM > $@
$(OUTPUT_SPL_LIBDIR)/%.o: %.c $(OUTPUT_SPL_LIBDIR)/%.d
	$(CC) -c $< $(CFLAGS) -D$(DEVICE) $(INCLUDE)  -o $@ 2>&1 | $(PYTHON) .make/recolor.py; exit $${PIPESTATUS[0]}

$(OUTPUT_SDCC_LIBDIR)/%.d: %.c | $(OUTPUT_SDCC_LIBDIR)
	$(CC) -c $< $(CFLAGS) -D$(DEVICE) $(INCLUDE) -MM > $@
$(OUTPUT_SDCC_LIBDIR)/%.o: %.c $(OUTPUT_SDCC_LIBDIR)/%.d
	$(CC) -c $< $(CFLAGS) -D$(DEVICE) $(INCLUDE)  -o $@ 2>&1 | $(PYTHON) .make/recolor.py; exit $${PIPESTATUS[0]}

$(OUTPUT_DIR):
	$(MKDIR) -p $(OUTPUT_DIR)
$(OUTPUT_SPL_LIBDIR):
	$(MKDIR) -p $(OUTPUT_SPL_LIBDIR)
$(OUTPUT_SDCC_LIBDIR):
	$(MKDIR) -p $(OUTPUT_SDCC_LIBDIR)

ifeq ($(wildcard $(SPL_LIB)),)
$(SPL_LIB): $(SPL_OBJECTS) 
	stm8-ar -rc $(SPL_LIB) $^
endif
ifeq ($(wildcard $(SDCC_LIB)),)
$(SDCC_LIB): $(SDCC_LIB_OBJECTS)
	stm8-ar -rc $(SDCC_LIB) $^
endif

compile_commands.json: $(PRJ_SRC_DIR) $(SPL_SRC_DIR)
	$(PYTHON) .make/compile_database_generator.py $(DEVICE)

.PHONY: clean clean-spl-lib clean-spl-objects clean-sdcc-lib clean-sdcc-objects 
.PHONY: cleanall clean-objects 

clean:
	rm -f ./out.ihx
	rm -f ./out.elf
	rm -rf $(OUTPUT_DIR)

clean-spl-objects:
	rm -Rf $(OUTPUT_SPL_LIBDIR)
clean-spl-lib: clean-spl-objects
	rm -f $(SPL_LIB)

clean-sdcc-objects:
	rm -Rf $(OUTPUT_SDCC_LIBDIR)
clean-sdcc-lib: clean-sdcc-objects
	rm -f $(SDCC_LIB)

clean-objects: clean-spl-objects clean-sdcc-objects
cleanall: clean-spl-lib clean-sdcc-lib clean


.PHONY:	flash flash2 rebuild

flash: $(TARGET).ihx
ifeq ($(OS),Windows_NT)
	+$(STVP) -BoardName=ST-LINK -Device=$(DEVICE_FLASH_STVP) -Port=USB -ProgMode=SWIM -no_loop -no_log -FileProg=$(TARGET).ihx
else
	+$(OPENOCD) -c "init" -c "program_device $(TARGET).ihx 0"
endif

flash2: $(TARGET).ihx
	+stm8flash -c $(STLINK) -p $(DEVICE_FLASH) -s flash -w $(TARGET).ihx

rebuild:: clean
	$(MAKE) all

reflash:: clean
	$(MAKE) flash

.PHONY: openocd debug switch-sdcc switch-sdccrm spl tree

openocd:
	+$(OPENOCD) -c "init" -c "reset halt"

debug: $(TARGET).elf
	+stm8-gdb --tui $^

switch-sdcc: clean
	$(LN) .make/Makefile-sdcc Makefile || $(CP) .make/Makefile-sdcc Makefile
switch-sdccrm: clean
	$(LN) .make/Makefile-sdccrm Makefile || $(CP) .make/Makefile-sdccrm Makefile

../SPL.tgz:
	curl https://gitlab.com/spseol/mit-no/spl/-/archive/main/spl-main.tar.gz --output ../SPL.tgz
../SPL: | ../SPL.tgz
	tar -C .. --transform='s%spl-main/%%' -xzf ../SPL.tgz spl-main/SPL/
	@printf "***********************************************************\n*  SPL byla rozbalena. Možná je třeba znovu spusti make   *\n***********************************************************\n"
../SPLSPL: | ../SPL.tgz
	tar -C .. --transform='s%spl-main/%%' -xzf ../SPL.tgz spl-main/SPLSPL/
	@printf "***********************************************************\n*  SPL byla rozbalena. Možná je třeba znovu spusti make   *\n***********************************************************\n"

.PHONY: spl spl-renew tree

spl: ../SPL ../SPLSPL

spl-renew:
	rm -Rf ../SPL*
	$(MAKE) spl

tree:
	+bash .make/tree.sh

# vim:ft=make
